{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nconst ENV = process.env.NODE_ENV;\nimport store from \"@/store\";\nimport router from \"../router/index\";\n\n// 创建axios实例  \nconst service = axios.create({\n  timeout: 15000,\n  // 请求超时时间\n  headers: {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  }\n  // baseURL: \"https://akarana-backend.onrender.com\"\n});\n\nservice.interceptors.request.use(config => {\n  const passURL = ['/api/login', '/api/reg'];\n  if (passURL.includes(config.url)) return config;\n  const tk = localStorage.getItem('@#@TOKEN');\n  if (tk) {\n    config.headers.Authorization = 'Bearer ' + tk;\n  } else {\n    delete config.headers.Authorization;\n  }\n  return config;\n});\nservice.interceptors.response.use(response => {\n  const {\n    status,\n    msg\n  } = response.data;\n  if (status === 1 && msg === 'TOKEN 解析错误') {\n    ElMessage({\n      message: `${msg}`,\n      type: \"error\"\n    });\n    store.commit('RESET_USERINFO');\n    localStorage.removeItem(\"@#@TOKEN\");\n    router.push('/login');\n  }\n  return response;\n});\nexport default service;","map":{"version":3,"names":["axios","ENV","process","env","NODE_ENV","store","router","service","create","timeout","headers","interceptors","request","use","config","passURL","includes","url","tk","localStorage","getItem","Authorization","response","status","msg","data","ElMessage","message","type","commit","removeItem","push"],"sources":["/Users/wucongzhen/Documents/GitHub/Akarana/src/src/utils/request.js"],"sourcesContent":["import axios from \"axios\";\nconst ENV = process.env.NODE_ENV;\nimport store from \"@/store\";\nimport router from \"../router/index\";\n\n// 创建axios实例  \nconst service = axios.create({\n  timeout: 15000, // 请求超时时间\n  headers: {\"content-type\": \"application/x-www-form-urlencoded\"}\n  // baseURL: \"https://akarana-backend.onrender.com\"\n});\nservice.interceptors.request.use((config) => {\n  const passURL = ['/api/login', '/api/reg']\n  if (passURL.includes(config.url)) return config\n  const tk = localStorage.getItem('@#@TOKEN')\n  if (tk) {\n    config.headers.Authorization = 'Bearer ' + tk\n  } else {\n    delete config.headers.Authorization\n  }\n  return config\n})\n\nservice.interceptors.response.use((response) => {\n  const { status, msg } = response.data\n  if (status === 1 && msg === 'TOKEN 解析错误') {\n    ElMessage({\n      message: `${msg}`,\n      type: \"error\",\n    });\n    store.commit('RESET_USERINFO');\n    localStorage.removeItem(\"@#@TOKEN\");\n    router.push('/login');\n  }\n  return response\n})\n\n\nexport default service;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ;AAChC,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,MAAM,MAAM,iBAAiB;;AAEpC;AACA,MAAMC,OAAO,GAAGP,KAAK,CAACQ,MAAM,CAAC;EAC3BC,OAAO,EAAE,KAAK;EAAE;EAChBC,OAAO,EAAE;IAAC,cAAc,EAAE;EAAmC;EAC7D;AACF,CAAC,CAAC;;AACFH,OAAO,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EAC3C,MAAMC,OAAO,GAAG,CAAC,YAAY,EAAE,UAAU,CAAC;EAC1C,IAAIA,OAAO,CAACC,QAAQ,CAACF,MAAM,CAACG,GAAG,CAAC,EAAE,OAAOH,MAAM;EAC/C,MAAMI,EAAE,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAC3C,IAAIF,EAAE,EAAE;IACNJ,MAAM,CAACJ,OAAO,CAACW,aAAa,GAAG,SAAS,GAAGH,EAAE;EAC/C,CAAC,MAAM;IACL,OAAOJ,MAAM,CAACJ,OAAO,CAACW,aAAa;EACrC;EACA,OAAOP,MAAM;AACf,CAAC,CAAC;AAEFP,OAAO,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAAES,QAAQ,IAAK;EAC9C,MAAM;IAAEC,MAAM;IAAEC;EAAI,CAAC,GAAGF,QAAQ,CAACG,IAAI;EACrC,IAAIF,MAAM,KAAK,CAAC,IAAIC,GAAG,KAAK,YAAY,EAAE;IACxCE,SAAS,CAAC;MACRC,OAAO,EAAG,GAAEH,GAAI,EAAC;MACjBI,IAAI,EAAE;IACR,CAAC,CAAC;IACFvB,KAAK,CAACwB,MAAM,CAAC,gBAAgB,CAAC;IAC9BV,YAAY,CAACW,UAAU,CAAC,UAAU,CAAC;IACnCxB,MAAM,CAACyB,IAAI,CAAC,QAAQ,CAAC;EACvB;EACA,OAAOT,QAAQ;AACjB,CAAC,CAAC;AAGF,eAAef,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}