{"ast":null,"code":"import { ref, onMounted, watch } from 'vue';\nexport default {\n  props: ['modelValue'],\n  emits: ['update:modelValue'],\n  setup(props, {\n    emit\n  }) {\n    const autocompleteInput = ref(null);\n    const search = ref(props.modelValue);\n    onMounted(() => {\n      if (typeof window.google === 'undefined') {\n        console.error('Google Maps JavaScript API is not loaded');\n        return;\n      }\n      const autocomplete = new window.google.maps.places.Autocomplete(autocompleteInput.value, {\n        componentRestrictions: {\n          country: 'NZ'\n        }\n      });\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        emit('update:modelValue', place.formatted_address);\n      });\n    });\n    watch(() => props.modelValue, newValue => {\n      search.value = newValue;\n    });\n    return {\n      autocompleteInput,\n      search\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","watch","props","emits","setup","emit","autocompleteInput","search","modelValue","window","google","console","error","autocomplete","maps","places","Autocomplete","value","componentRestrictions","country","addListener","place","getPlace","formatted_address","newValue"],"sources":["/Users/wucongzhen/Documents/GitHub/Akarana/src/src/components/GoogleAutocomplete.vue"],"sourcesContent":["<template>\n  <input\n    ref=\"autocompleteInput\"\n    type=\"text\"\n    placeholder=\"Enter address...\"\n    v-model=\"search\"\n    @input=\"$emit('input', $event)\"\n  />\n</template>\n\n<script>\nimport { ref, onMounted, watch } from 'vue';\n\nexport default {\n  props: ['modelValue'],\n  emits: ['update:modelValue'],\n  setup(props, { emit }) {\n    const autocompleteInput = ref(null);\n    const search = ref(props.modelValue);\n\n    onMounted(() => {\n      if (typeof window.google === 'undefined') {\n        console.error('Google Maps JavaScript API is not loaded');\n        return;\n      }\n\n      const autocomplete = new window.google.maps.places.Autocomplete(\n        autocompleteInput.value,\n        {\n          componentRestrictions: { country: 'NZ' },\n        }\n      );\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        emit('update:modelValue', place.formatted_address);\n      });\n    });\n\n    watch(() => props.modelValue, (newValue) => {\n      search.value = newValue;\n    });\n\n    return {\n      autocompleteInput,\n      search,\n    };\n  },\n};\n</script>"],"mappings":"AAWA,SAASA,GAAG,EAAEC,SAAS,EAAEC,KAAI,QAAS,KAAK;AAE3C,eAAe;EACbC,KAAK,EAAE,CAAC,YAAY,CAAC;EACrBC,KAAK,EAAE,CAAC,mBAAmB,CAAC;EAC5BC,KAAKA,CAACF,KAAK,EAAE;IAAEG;EAAK,CAAC,EAAE;IACrB,MAAMC,iBAAgB,GAAIP,GAAG,CAAC,IAAI,CAAC;IACnC,MAAMQ,MAAK,GAAIR,GAAG,CAACG,KAAK,CAACM,UAAU,CAAC;IAEpCR,SAAS,CAAC,MAAM;MACd,IAAI,OAAOS,MAAM,CAACC,MAAK,KAAM,WAAW,EAAE;QACxCC,OAAO,CAACC,KAAK,CAAC,0CAA0C,CAAC;QACzD;MACF;MAEA,MAAMC,YAAW,GAAI,IAAIJ,MAAM,CAACC,MAAM,CAACI,IAAI,CAACC,MAAM,CAACC,YAAY,CAC7DV,iBAAiB,CAACW,KAAK,EACvB;QACEC,qBAAqB,EAAE;UAAEC,OAAO,EAAE;QAAK;MACzC,EACD;MACDN,YAAY,CAACO,WAAW,CAAC,eAAe,EAAE,MAAM;QAC9C,MAAMC,KAAI,GAAIR,YAAY,CAACS,QAAQ,EAAE;QACrCjB,IAAI,CAAC,mBAAmB,EAAEgB,KAAK,CAACE,iBAAiB,CAAC;MACpD,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFtB,KAAK,CAAC,MAAMC,KAAK,CAACM,UAAU,EAAGgB,QAAQ,IAAK;MAC1CjB,MAAM,CAACU,KAAI,GAAIO,QAAQ;IACzB,CAAC,CAAC;IAEF,OAAO;MACLlB,iBAAiB;MACjBC;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}